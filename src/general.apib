
# Group Общие Сведения
## Аутентификация
Для того чтобы успешно взаимодействовать с JSON API онлайн-сервиса МойСклад, необходимо аутентифицироваться в системе. МойСклад поддерживает аутентификацию по протоколу Basic Auth, при которой вместе с запросом передаётся заголовок `Authorization` со значением пары `логин:пароль`, закодированным в варианте RFC2045-MIME стандарта Base64. Аутентификация по протоколу Basic Auth с автоматической генерацией соответствующего заголовка поддерживается во многих
HTTP-клиентах, таких как Postman, curl и т.п.

## Замечания по разработке клиентских приложений
При разработке клиентского приложения необходимо учитывать следующие моменты:
  + Структура ответов и типы полей поддерживаются нами неизменными
  + Может быть добавлено новое поле без нарушения структуры ответа
  + Может быть добавлен новый ресурс

## Ограничения
Для JSON API установлены следующие ограничения:
  + Не более 100 запросов за 5 секундный период
  + Не более 5 параллельных запросов от одного пользователя
  + Не более 15 параллельных запросов от аккаунта
  + Не более 500 параллельных запросов с одного ip-адреса
  + Не более 10 Мб данных в одном запросе, отправляемом на сервер

Также накладывается ограничение на максимальное число объектов (позиций, материалов, продуктов), передаваемых в одном массиве в запросе - не более 100 элементов.
В случае, если количество элементов коллекции превышает максимально допустимое, произойдёт ошибка со статусом 413.
Если количество позиций превышает максимально допустимое, то для дальнейшего пополнения позиций нужно будет работать со специальным ресурсом,
описание которого приведено в конкретной сущности.

## Метаданные
В JSON есть несколько видов Метаданных. Один из них - поле **meta**, которое фигурирует в большинстве
JSON представлений объектов, и содержит информацию об объекте или о выдаче, а также может использоваться в качестве ссылки
на другой объект. Поле **meta** представляет собой объект со следующими атрибутами:
+ **href** - Ссылка на объект
+ **metadataHref** - Ссылка на метаданные сущности (Другой вид метаданных. Присутствует не во всех сущностях)
+ **type** - Тип объекта
+ **mediaType** - Тип данных, которые приходят в ответ от сервиса, либо отправляются
в теле запроса. В рамках данного  API всегда равен `application/json`
+ **uuidHref** -  Ссылка на объект на UI. Присутствует не во всех сущностях. Может быть использована для получения uuid

<h3>Атрибуты расширенного объекта meta</h3>

Следующие атрибуты объекта **meta** появляются, как правило, в методах выдачи списка сущностей/строк отчёта.
В них содержится информация о выдаче, пришедшей в ответ. В объектах **meta**, содержащих
данные лишь об одном объекте (например поле **meta** в объекте **context**) нижеперечисленные атрибуты не фигурируют.
+ **size** - Размер выданного списка
+ **limit** - Максимальное количество элементов в выданном списке
+ **offset** - Отступ в выданном списке

<h3>Метаданные сущности</h3>
Другой вид Метаданных. Представляет собой отдельный ресурс, содержащий информацию обо всех объектах сущностей данного типа.
**Есть не у каждой сущности.** Присутствует лишь у тех сущностей, у которых в данной документации описан ресурс "Метаданные <наименование_сущности>".
Как правило содержит информацию о вложенных сущностях, коллекциях и дополнительных полях.


JSON API позволяет получить метаданные всех сущностей с помощью метода `/entity/metadata`. Также можно ограничить
выборку, указав в фильтре **type** только необходимые сущности.

Пример URL для запроса на получение метаданных с помощью GET:
+ `/entity/metadata?filter=type=product;type=service;type=demand`

Пример тела запроса:
```
{
  "service": {
    "meta": {
      "href": "https://online.moysklad.ru/api/remap/1.1/entity/service/metadata",
      "mediaType": "application/json"
    },
    "priceTypes": [
      {
        "name": "Цена продажи"
      }
    ]
  },
  "product": {
    "meta": {
      "href": "https://online.moysklad.ru/api/remap/1.1/entity/product/metadata",
      "mediaType": "application/json"
    },
    "priceTypes": [
      {
        "name": "Цена продажи"
      }
    ]
  },
  "demand": {
    "meta": {
      "href": "https://online.moysklad.ru/api/remap/1.1/entity/demand/metadata",
      "mediaType": "application/json"
    }
  }
}
```

<h3> Мета коллекций </h3>
**meta** коллекций содержит все те же атрибуты, что и **meta** сущностей, однако, если в списке появляется больше
позиций, чем умещается на одной странице (size > limit) в объект **meta** добавляются след. поля:
+ **nextHref** - Ссылка на предыдущую страницу сущностей.
+ **previousHref** - Ссылка на следующую страницу сущностей.

**meta** с такими полями можно встретить при выполнении запросов на получение всех объектов определённого типа
 на учетной записи (например запрос всех отгрузок), а также при запросе всех позиций отдельного документа.

## Обработка ошибок
<h3>СТРУКТУРА ОШИБОК</h3>
Ошибка в данном API представляет собой массив **errors**, содержащий объекты **error**, каждый из которых описывает отдельную ошибку.
<h3>СТРУКТУРА ОБЪЕКТА error</h3>
+ **error** - Заголовок ошибки
+ **parameter** - Параметр, на котором произошла ошибка
+ **code** - Код ошибки (Если поле ничего не содержит, смотрите HTTP status code)
+ **error_message**  - Сообщение, прилагаемое к ошибке.

<h3>Возвращаемые HTTP статусы ошибок и их значения:</h3>
| HTTP status code | Значение                                                                                                                                           |
| :--------------: |:---------------------------------------------------------------------------------------------------------------------------------------------------|
| 301              | Запрашиваемый ресурс находится по другому URL.                                                                                                     |
| 303              | Запрашиваемый ресурс может быть найден по другому URI и должен быть найден с использоваием GET запроса                                             |
| 400              | Ошибка в структуре JSON передаваемого запроса                                                                                                      |
| 401              | Имя и/или пароль пользователя указаны неверно или заблокированы пользователь или аккаунт                                                           |
| 403              | У вас нет прав на просмотр данного объекта                                                                                                         |
| 404              | Запрошенный ресурс не существует                                                                                                                   |
| 405              | http-метод указан неверно для запрошенного ресурса                                                                                                 |
| 409              | Указанный объект используется и не может быть удалён                                                                                               |
| 410              | Версия API больше не поддерживается                                                                                                                |
| 412              | Не указан обязательный параметр строки запроса или поле структуры JSON                                                                             |
| 413              | Размер запроса или количество элементов запроса превышает лимит (например, количество позиций, передаваемых в массиве **positions**, превышает 100)|
| 429              | Превышен лимит количества запросов                                                                                                                 |
| 500              | При обработке запроса возникла непредвиденная ошибка                                                                                               |
| 502              | Сервис временно недоступен                                                                                                                         |
| 503              | Сервис временно отключен                                                                                                                           |
| 504              | Превышен таймаут обращения к сервису, повторите попытку позднее                                                                                    |

Также, вместе с телом ответа ошибки, вам могут прийти следующие заголовки (Headers):
+ X-Lognex-Auth - расширенный код ошибки аутентификации
+ X-Lognex-Auth-Message - сообщение об ошибке.
+ X-Lognex-API-Version-Deprecated - дата отключения запрошенной версии API.
+ Location - URL по которому доступен запрашиваемый ресурс (в случае ответа с кодом 301 или кодом 303)

<h4>Вы можете узнать лимит оставшихся запросов с помощью следующих заголовков</h4>
+ X-RateLimit-Limit - количество запросов, которые равномерно можно сделать в течение интервала до появления 429 ошибки
+ X-Lognex-Retry-TimeInterval - интервал в миллисекундах, в течение которого можно сделать эти запросы
+ X-RateLimit-Remaining - Число запросов, которые можно отправить до получения 429 ошибки
+ X-Lognex-Reset - время до сброса ограничения в миллисекундах. Равно нулю, если ограничение не установлено
+ X-Lognex-Retry-After - время до сброса ограничения в миллисекундах.

<h2>Все коды ошибок и их описания</h2>
___
<div class="scrlable">
<!-- include(errors.apib) -->
</div>
___

## Работа с дополнительными полями
Список сущностей, у которых есть доп. поля:
+ [Договор](#договор)
+ [Контрагент](#контрагент)
+ [Юрлицо](#юрлицо)
+ [Проект](#проект)
+ [Склад](#склад)
+ [Сотрудник](#сотрудник)
+ [Товар](#товар)
+ [Услуга](#услуга)
+ [Комплект](#комплект)
+ [Серия](#серия)
+ Все документы:
  - [Возврат покупателя](#документ-возврат-покупателя)
  - [Возврат поставщику](#документ-возврат-поставщику)
  - [Входящий платёж](#документ-входящий-платеж)
  - [Заказ покупателя](#документ-заказ-покупателя)
  - [Заказ поставщику](#документ-заказ-поставщику)
  - [Исходящий платёж](#документ-исходящий-платеж)
  - [Оприходование](#документ-оприходование)
  - [Отгрузка](#документ-отгрузка)
  - [Перемещение](#документ-перемещение)
  - [Приёмка](#документ-приёмка)
  - [Приходный ордер](#документ-приходный-ордер)
  - [Расходный ордер](#документ-расходный-ордер)
  - [Розничная продажа](#документ-розничная-продажа)
  - [Розничная смена](#документ-розничная-смена)
  - [Розничный возврат](#документ-розничный-возврат)
  - [Списание](#документ-списание)
  - [Инвентаризация](#документ-инвентаризация)
  - [Счёт покупателю](#документ-счёт-покупателю)
  - [Счёт поставщика](#документ-счёт-поставщика)
  - [Счёт-фактура выданный](#документ-счет-фактура-выданный)
  - [Счёт-фактура полученный](#документ-счет-фактура-полученный)
  - [Прайс-лист](#документ-прайс-лист)
  - [Внутренний заказ](#документ-внутренний-заказ)
  - [Заказ на производство](#документ-заказ-на-производство)
  - [Тех. операция](#документ-тех.-операция)
  - [Полученный отчёт комиссионера](#полученный-отчёт-комиссионера)
  - [Выданный отчёт комиссионера](#выданный-отчёт-комиссионера)


Дополнительные поля сущности - внутренняя коллекция **attributes**.
Представлена в виде массива объектов с полями:
+ **meta** - Ссылка на метаданные доп. поля.
+ **id** - Id соответствующего доп. поля.
+ **name** - Наименование доп. поля
+ **value** - Значение, указанное в доп. поле.

Посмотреть все созданные в основном интерфейсе доп. поля можно с помощью запроса на получение метаданных Сущности.
Ответ - объект, содержащий метаданные об объектах данного типа, и в случае объектов, для которых определены доп. поля -
информацию о доп. полях в виде коллекции attributes, объекты которой содержат следующие поля:
+ **meta** - Ссылка на метаданные доп. поля
+ **id** - Id доп. поля
+ **name** - Наименование доп. поля
+ **type** - Тип доп. поля
+ **required** - Флажок о том, является ли доп. поле обязательным



Возможные значения типа доп. поля (поле **type**) и соответствующие им значения типа в JSON, а также
типы атрибута **value** в JSON объекта доп поля при соответствующем type:

| Тип атрибута        | Значение поля type в JSON        | Тип поля value в JSON |
| ------------------- |:---------------------------------| --------------------- |
| Строка              | string                           | string                |
| Число целое         | long                             | number                |
| Дата                | time                             | string                |
| Справочник          | {entityType}                     | object **             |
| Файл                | file                             | string                |
| Число дробное       | double                           | number                |
| Флажок              | boolean                          | boolean               |
| Текст               | text                             | string                |
| Ссылка              | link                             | string                |

Отдельного упоминания заслуживает тип Атрибута Справочник. Значение **type** в представлении
объекта атрибута будет разным, в зависимости от того, справочник каких сущностей был
выбран при создании Атрибута. Ниже представлена таблица, в которой при выбранном типе Атрибута
"Справочник" показаны значения поля type в зависимости от выбранного типа сущностей в справочнике.

Если в качестве типа доп. поля выбран пользовательский справочник, то в составе объекта данного
доп. поля появится новый атрибут **customEntityMeta** являющийся ссылкой на метаданные этого справочника.
Полный набор атрибутов доп. поля будет выглядеть следующим образом:
+ **meta** - Ссылка на метаданные доп. поля
+ **customEntityMeta** - Ссылка на метаданные пользовательского справочника
+ **id** - ID доп. поля
+ **name** - Наименование доп. поля
+ **type** - Тип доп. поля
+ **required** - Флажок о том, является ли доп. поле обязательным

| Тип сущностей справочника | Значение поля type в JSON (entityType) |
| ------------------------- |:---------------------------------------|
| [Контрагент]              | counterparty                           |
| [Товар]                   | product                                |
| [Склад]                   | store                                  |
| [Проект]                  | project                                |
| [Договор]                 | contract                               |
| [Сотрудник]               | employee                               |
| Имя_пользовательского справочника| customentity                    |

При выбранном типе Атрибута "Справочник" атрибут **value** в его представлении
будет объектом со следующими свойствами:
+ meta - [Метаданные](#header-метаданные), представляющие собой ссылку на сущность из соответствующего справочника
+ name - Наименование соответствующей сущности

Обнуление доп. поля типа "Справочник" происходит так же, как и при работе с другими доп. полям.
В запросе на обновление в коллекции attributes следует указать объект с id данного поля, а в качестве value передать null.

С коллекцией доп. полей можно работать только в контексте отдельной сущности. Доп. поля и их значения
можно передать как коллекцию структур {**id** : uuid, **value** : ""} в теле запроса  как на создание, так и на обновление сущности.
Опционально можно передать также значение полей **meta** и **name**.
В переданном массиве объектов можно указать не все доп. поля - проинициализируются/обновятся только указанные.
Если для доп. поля указан **id**, которого нет в метаданных сущности, то возникнет ошибка.

При обновлении значений доп.полей если в теле запроса на обновление сущности в массиве доп. полей:
+ Не указаны **id** каких-либо доп.полей, которым в данной сущности уже присвоено значение - соответствующие доп. поля обновлены не будут.
+ Указаны **id**, доп. полей, которым в данной сущности уже присвоено значение - соответствующим доп. полям будет присвоено переданное значение.
+ Указаны **id**, доп. полей, которым в данной сущности ещё не присвоено значение - соответствующим доп. полям эти новые значения будут присвоены.

### Доп. поля типа файл

Для загрузки значения для доп. поля типа файл нужно в JSON при создании или обновлении для значения поля указать объект следующей структуры:
+ **filename** - Имя файла `Необходимое`
+ **content** - Байты файла, закодированные в base64 `Необходимое`

Пример указания значения для доп. поля типа файл есть в секции [создания товара](#товар-товары-post)

## Работа с позициями документов
API сервиса МойСклад позволяет оперировать с такими документами как [Отгрузка](#отгрузка), [Заказ покупателя](#заказ-покупателя), [Счёт покупателю](#счёт-покупателю),
[Розничная продажа](#розничная-продажа). Перечисленные документы содержат позиции, работать с которыми можно как в составе отдельного документа,
так и с помощью специальных ресурсов для управления позициями документа.
<h3> Работа с позициями в рамках отдельного документа </h3>
При работе с позициями в рамках отдельного документа, их можно передавать как поле **positions**, представляющее собой массив позиций документа, в составе объекта, использующегося
в запросе на изменение или создание документа. В таком случае, массив позиций воспринимается как множество всех позиций документа
и полностью заменяет (в случае запроса на обновление) все уже существующие позиции в документе. В случае запроса на обновление, все позиции, которые существовали ранее в документе,
но не были переданы в теле запроса на обновление, будут удалены, все существующие позиции, id которых совпал с id передаваемых позиций в теле запроса, будут обновлены,
а новые позиции, которых ранее не было среди существующих позиций документа, будут добавлены в список позиций.
<h3> Работа с позициями документов с помощью специальных ресурсов </h3>
В JSON API предусмотрены специальные ресурсы для управления позициями документов. Эти ресурсы как правило доступны по следующему URI и с помощью них вы сможете удалять позиции из документа, сделав запрос с методом DELETE по URL соответствующего ресурса с указание id позиции:
+ `/{код сущности документа, в составе JSON API}/{id отдельного документа}/positions`

Пример URL для запроса на удаление с помощью DELETE:
+ `/{код сущности документа, в составе JSON API}/{id отдельного документа}/positions/179dd832-960c-11e6-8a84-bae5000000dc`

При работе со специальными ресурсами можно запрашивать список всех позиций документа, создавать новые позиции, а также обновлять существующие.
При создании новых позиций с помощью данных ресурсов, можно обходить ограничение в 100 позиций на документ.
Также, используя данный ресурс, можно управлять массовым обновлением позиций. Для изменения сведений по отдельным позициям
необходимо использовать ресурсы управления отдельными позициями документа, которые доступны по URI:
+ `/{код сущности документа, в составе JSON API}/{id отдельного документа}/positions/{id отдельной позиции}`

Оба способа работы с позициями также описаны в документации по каждому из документов.

Также возможно массовое удаление позиций документа, используя метод POST по URL соответствующего ресурса. В теле запроса необходимо указать массив удаляемых позиций, указав поле **meta** у каждой из позиций.

Пример URL для запроса на массовое удаление позиций с помощью POST:
+ `/{код сущности документа, в составе JSON API}/{id отдельного документа}/positions/delete`

Пример тела запроса:
```
[
  {
    "meta": {
        "href": "https://online.moysklad.ru/api/remap/1.1/entity/demand/405f69c0-019e-11e6-9464-e4de00000085/positions/727cf336-0310-11e6-9464-e4de00000013",
        "type": "demandposition",
        "mediaType": "application/json"
    }
  },
  {
    "meta": {
        "href": "https://online.moysklad.ru/api/remap/1.1/entity/demand/405f69c0-019e-11e6-9464-e4de00000085/positions/727cfce0-0310-11e6-9464-e4de00000014",
        "type": "demandposition",
        "mediaType": "application/json"
    }
  },
  {
    "meta": {
        "href": "https://online.moysklad.ru/api/remap/1.1/entity/demand/405f69c0-019e-11e6-9464-e4de00000085/positions/727d057f-0310-11e6-9464-e4de00000015",
        "type": "demandposition",
        "mediaType": "application/json"
    }
  }
]
```



## Назначение поля syncId
Сущностям, у которых среди атрибутов присутствует поле **syncId**, оно необходимо для того, чтобы в случае сбоя
при повторной отправке запроса на создание новой сущности не происходило дублирование объектов. Если в теле запроса
на создание сущности указать сгенерированный на клиенте syncId, то при повторной отправке этого же запроса (с тем же syncId) вместо создания
сущности с идентичными полями в ответ придёт ранее созданная сущность.

## Создание и обновление объекта
При создании объекта достаточно заполнить только поля, помеченные `Необходимое`. Данные поля используются только при создании, при обновлении они не требуются.
Поля, помеченные `Только для чтения`, игнорируются при создании/обновлении объекта.

## Создание и обновление нескольких объектов
При использовании метода POST вы можете указать в теле запроса вместо одной -
массив сущностей. Для этого, вам нужно передать массив (начать тело запроса с `[` и закончить `]`), который будет содержать JSON представления
объектов, которые вы хотите создать или обновить. Обновляемые сущности должные содержать идентификатор в виде метаданных.

## Поддержка null
В рамках JSON API можно удалить значение из поля типа объект (если это поле не является обязательным, или же если данное поле в
основном интерфейсе может содержать пустое значение). Например: поле Договор(**contract**) в любом из документов. Сделать это можно передав в
запросе на обновление сущносте в данное поле null. Например: `{  "contract": null  }`.
Удаление валюты из документов (`{rate: null}`) равносильно изменению валюты документа на валюту по умолчанию. В результате все
цены и суммы будут пересчитаны. Накладные расходы также будут пересчитаны, если они не были указаны явно.

## Пустые поля
Если какое-то из полей сущности не было заполнено и, при этом оно не является обязательным, оно не будет выдано в JSON представлении этой сущности.

## Формат даты и времени
В JSON API поля типа дата-время (момент времени) - это строка в формате:
+ Без миллисекунд: `ГГГГ-ММ-ДД ЧЧ:мм:сс`
+ С миллисекундами: `ГГГГ-ММ-ДД ЧЧ:мм:сс.ммм`
Для получения полей типа дата-время с миллисекундами в формате: `ГГГГ-ММ-ДД ЧЧ:ММ:СС.ммм` нужно добавить специальный заголовок к запросу:<br>
`X-Lognex-Format-Millisecond` со значением `true`.
+ Без секунд: `ГГГГ-ММ-ДД ЧЧ:мм` Только для параметров фильтрации.

Следующие поля устанавливаются и выводятся в JSON API с точностью до минут, а именно со значением секунд и миллисекунд равным `00`:
+ **incomingDate**
+ **commisionPeriodStart**
+ **commisionPeriodEnd**
+ **certificateDate**
+ **moment**
+ **deliveryPlannedMoment**
+ **paymentPlannedMoment**
+ **firstDemandDate**
+ **lastDemandDate**
+ дополнительное поле с типом **Дата**

## Сортировка объектов

Для сортировки списка объектов можно использовать url параметр `order`.
Значение этого параметра - **urlencoded** строка с условиями сортировки, перечисленными через `;`. (Все примеры ниже указаны без urlencoded для лучшей читаемости)
Каждое условие сортировки- это сочетание названия поля, запятой (опционально, если указывается направление сортировки), направления сортировки (опционально; может принимать значения  `asc` и `desc`. Значение по умолчанию - `asc`).

Сортировка поддерживается для следующих типов полей: числовой, строковый, дата-время, логический и uuid.

Примеры запросов с сортировкой:

+ https://online.moysklad.ru/api/remap/1.1/entity/supply?order=name
+ https://online.moysklad.ru/api/remap/1.1/entity/product?order=code,desc
+ https://online.moysklad.ru/api/remap/1.1/entity/product?order=name;code,desc
+ https://online.moysklad.ru/api/remap/1.1/entity/product?order=name,desc;code,asc

<h3> Сортировка по одному полю (Deprecated) </h3>
Для сортировки списка объектов по одному полю возможно использование следующих url параметров:
+ **order** - название поля, по которому будет производиться сортировка.
+ **direction** - направление сортировки. Может принимать значения  `asc` и `desc`. Значение по умолчанию - `asc`.

Примеры запросов с сортировкой:
+ https://online.moysklad.ru/api/remap/1.1/entity/product?order=name&direction=asc
+ https://online.moysklad.ru/api/remap/1.1/entity/supply?order=moment&direction=desc
+ https://online.moysklad.ru/api/remap/1.1/entity/demand?order=applicable&direction=asc

Для перехода с deprecated-формата сортировки на актуальный вы можете воспользоваться таблицей примеров маппинга url параметров

| Url параметры (deprecated-формат)   | Url параметры (актуальный формат)  |
| ----------------------------------- |:-----------------------------------|
| `order=name`                        | `order=name`                       |
| `order=name&direction=asc`          | `order=name,asc` либо `order=name` |
| `order=moment&direction=desc`       | `order=moment,desc`                |

## Фильтрация выборки с помощью параметра filter
Для фильтрации выборки по нескольким полям можно использовать url параметр `filter`.
Значение этого параметра - **urlencoded** строка с поисковыми условиями, перечисленными через `;`. Для использования самого символа `;`
в текстовых фильтрах необходимо указывать два символа `\;`. (Все примеры ниже указаны без urlencoded для лучшей читаемости)
Каждое поисковое условие - это сочетание названия поля, оператора и константы.
Фильтровать можно по всем полям, значения которых являются примитивными типами. Т.е. нельзя фильтровать поля-объекты и поля-массивы,
все остальные поля могут быть использованы в параметре `filter`.

+ Допустимые операторы: `['=', '>', '<', '>=', '<=', '!=', '~', '~=', '=~']`

Если в поисковом запросе несколько раз встречается условие типа "равенство" `=` применённое к одному и тому же полю,
то такое условие интерпретируется как совокупность условий, разделённых логическим оператором `ИЛИ`.
+ Например условие `filter=sum=100;sum=150` будет интерпретировано как `sum=100 ИЛИ sum=150`
или же `sum in (100, 150)`

Если же встречается несколько условий вида "не равно" `!=`, наложенных на одну и ту же переменную, то они интерпретируются как совокупность
условий разделённых логическим оператором `И`.
+ Например условие `filter=name!=0001;name!=0002` будет эквивалентно следующим (взаимно эквивалентным) условиям :
`name != 0001 И name != 0002` или `name not in (0001, 0002)`

Если на одно из полей наложено ограничение типа "равенство", а затем на него накладывается ограничение типа неравенство - в таком случае произойдёт ошибка.
+ Например условие `filter=sum=100;sum>99` вызовет ошибку.

Допускается использование одновременно нескольких одинаковых операторов сравнения `['>', '<', '>=', '<=']` для одного поля. При этом будет использовано лишь первое значение.
+ Например условие `filter=sum>99;sum>100` будет аналогично условию `filter=sum>99`.
В будущих версиях такое условие будет вызывать ошибку.

Фильтры, применённые к разным полям объединяются через логическое `И`, т.е. в запросе вида:
+ `filter=sum=100;moment>2016-10-11 12:00:00` выборка будет отфильтрована и по сумме и по дате.

<h3> Проверка на пустое значение </h3>
Если в строке фильтрации указать конструкцию вида: `<имя_поля>=;` то в выборку попадут только объекты, где
данное поле равно null (т.е. отсутствует значение), а если тип поля - строковое, то будет также выполнена проверка на пустую строку, т.е. поле=''.
Конструкция `<имя_поля>!=;` выполнит проверку на присутствие значения. С помощью данной конструкции можно проверить наличие значения в ссылочном поле.

<h3>Фильтрация документов</h3>
Для фильтрации выборки **документов** следует использовать параметр **isDeleted**. Может принимать значения `true` и `false`.
+ При указании значения `true` вернутся все документы данного типа, находящиеся в корзине.
+ При указании значения `false` вернутся только неудалённые документы.
+ Можно вывести все документы: и удалённые, и нет, указав в запросе оба значения данного параметра: `filter=isDeleted=true;isDeleted=false`.

<h3>Фильтрация сущностей</h3>
Для фильтрации выборки **сущностей** следует использовать параметр **archived**. Данный параметр принимает значения `true` и `false`.
+ При указании значения `true` вернутся все сущности данного типа, находящиеся в архиве.
+ При указании значения `false` вернутся только не архивные сущности.
+ Можно вывести все сущности: и архивные, и нет, указав в запросе оба значения данного параметра: `filter=archived=true;archived=false`.
Фильтровать по параметру archived можно только те сущности, у которых данный параметр присутствует в списке полей.

<h3>Фильтрация ссылочных полей</h3>
С помощью filter можно фильтровать ссылочные поля. Если в сущности присутствует ссылочное поле в виде метаданных,
можно использовать следующую конструкцию для того чтобы отфильтровать по этому полю выборку:
+ `filter=<имя_поля>=<ссылка>`

Пример ссылки:
+ `http://online.moysklad.ru/api/remap/1.1/entity/<type>/<id>`

Вот несколько примеров:
+ `filter=agent=http://online.moysklad.ru/api/remap/1.1/entity/counterparty/<id>`
+ `filter=ownAgent=http://online.moysklad.ru/api/remap/1.1/entity/organization/<id>`

Ссылочные поля, доступные для фильтрации:
+ agent
+ ownAgent
+ owner
+ group
+ parent
+ contract
+ project
+ organization
+ store
+ agentStore
+ supplier

Для розничных операций ("Розничная смена", "Розничная продажа", "Розничный возврат", "Внесение денег", "Выплата денег") также доступна фильтрация по:
+ retailstore

Примеры запросов для фильтрации :
+ `https://online.moysklad.ru/api/remap/1.1/entity/demand?filter=moment>2016-10-11 12:00:00;moment<2016-10-11 13:00:00;sum=100;name=0010;name=0011`
+ `https://online.moysklad.ru/api/remap/1.1/entity/counterparty?filter=name=Иван;phone=89269269222;email=vanyan@mail.krut`

<h3>Фильтрация по полям типа ID</h3>
С помощью filter можно фильтровать поля типа ID.

+ `filter=<имя_поля>=<ID>`

Пример ID:
+ `94975104-3cad-11e8-1e44-bd4d00000084`

Например:
+ `filter=productid=94975104-3cad-11e8-1e44-bd4d00000084`

<h3>Фильтрация по дополнительным полям</h3>
С помощью filter можно фильтровать по дополнительным полям. Список дополнительных полей сущности указан в ее метаданных
`https://online.moysklad.ru/api/remap/1.1/entity/product/metadata`
Можно использовать следующую конструкцию для того чтобы отфильтровать по дополнительному полю выборку:
+ `filter=<ссылка на доп.поле>=<значение>`

для доп.полей типа справочник:
+ `filter=<ссылка на доп.поле>=<ссылка на сущность>`

Пример ссылки на доп.поле
+ `http://online.moysklad.ru/api/remap/1.1/entity/<type>/metadata/attributes/<id>`

Пример ссылки на сущность:
+ `http://online.moysklad.ru/api/remap/1.1/entity/<type>/<id>`

для доп.полей типа пользовательский справочник
+ `http://online.moysklad.ru/api/remap/1.1/entity/customentity/<customentity_id>/<id>`

Примеры фильтра:
+ `filter=https://online.moysklad.ru/api/remap/1.1/entity/<type>/metadata/attributes/<id>
=42`

+ `filter=https://online.moysklad.ru/api/remap/1.1/entity/<type>/metadata/attributes/<id>
=http://online.moysklad.ru/api/remap/1.1/entity/<type>/<id>`

## Фильтрация по сущностям, на которые нет права просмотра
При фильтрации по сущности, на которую у текущего пользователя нет прав на просмотр в ответе придёт пустой список.
Например, при фильтрации задач (**task**) по автору (**author**), который является сотрудником, которого не может просматривать текущий пользователь,
в ответ вернётся пустой список задач.

## Параметры фильтрации выборки
В JSON API сервиса МойСклад предусмотрена возможность фильтрации списка
сущностей с помощью специальных параметров. Все параметры фильтрации передаются
как URL параметры.
+ **updatedFrom**
  Параметр строкового типа. В качестве значения должна быть передана строка в формате
  дата + время с точностью до секунд. В отфильтрованную выборку попадут все объекты,
   момент обновления которых больше или равен значению, указанному в параметре.

   Формат строки : `ГГГГ-ММ-ДД ЧЧ:ММ:СС[.ммм]`, Часовой пояс: `MSK` (Московское время)

+ **updatedTo**
  Параметр строкового типа. В качестве значения должна быть передана строка в формате
  дата + время с точностью до секунд. В отфильтрованную выборку попадут все объекты,
  момент обновления которых меньше или равен значению, указанному в параметре.

   Формат строки : `ГГГГ-ММ-ДД ЧЧ:ММ:СС[.ммм]`, Часовой пояс: `MSK` (Московское время)

+ **updatedBy**
  Параметр строкового типа. В качестве значения должен быть передан uid (логин пользователя, `admin@admin`).
  В отфильтрованную выборку попадут все объекты, автором последних изменений которых является
  пользователь с uid, указанным в значении параметра.

   Формат строки : `uid`

Также есть дополнительные фильтры для Документов:
+ **state&#46;name**
  Параметр строкового типа. В качестве значения должно передаваться наименование статуса, выставленного на документы.
  В отфильтрованную выборку попадут все документы данного типа, на которые выставлен статус с указанным именем.
+ **state&#46;id**
  Параметр строкового типа. В качестве значения должен передаваться id статуса, выставленного на документы.
  В отфильтрованную выборку попадут все документы данного типа, на которые выставлен статус с указанным id.

   Формат строки : `uuid`
+ **organization&#46;id**
  Параметр строкового типа. В качестве значения должен передаваться id юрлица, от имени которого создан документ.
  В отфильтрованную выборку попадут все документы данного типа, которые были созданы юрлицом с указанным id.

   Формат строки : `uuid`

## Контекстный поиск
В JSON API можно осуществлять контекстный поиск среди списка сущностей определённого типа по их строковым полям. Для этого
используется URI параметр фильтрации **search**
+ **search**
  Параметр фильтрации, с помощью которого можно осуществить поиск в списке сущностей. Поиск происходит по основным строковым полям сущностей данного
  типа. Результатом поиска будет отсортированный по релевантности список сущностей данного типа, прошедших фильтрацию по переданной поисковой строке. В отличии от фильтрации выборки
  с помощью параметра **filter**, при которой значения проверяются на точное совпадение указанным, при контекстном поиске проверка на совпадение не строгая.
  Таким образом, если осуществлять фильтрацию вида `../entity/<entity_type>?filter=name=120` в отфильтрованную выборку попадут только те сущности, поле **name**
  у которых имеет значение `120` и никакие другие. При контекстном поиске вида `../entity/<entity_type>?search=120` будут выведены как сущности с **name** равным
  `120`, так и сущности, в имени (или в другом строковом поле) которых `120` является началом какого-то слова, например `12003`, `пазл детский 1200 штук` и т.п.
  Причем, если ввести несколько слов `../entity/<entity_type>?search=120 возврат` и поиск идёт по полям **name** и **description**, то будут выведены как сущности с **name** равным `1200` и с **description**
  равным `возврат из-за деффекта`, так и сущности с именем `777` с описанием `розничный возврат на улице 120 летия`.

  + Примеры запросов контекстного поиска (значения должны быть urlencoded):
    - `https://online.moysklad.ru/api/remap/1.1/entity/project?search=реструктуризация`
    - `https://online.moysklad.ru/api/remap/1.1/entity/move?search=ул.Вавилова`
    - `https://online.moysklad.ru/api/remap/1.1/entity/counterparty?search=петров`



## Оператор фильтрации "подобие"
В JSON API для <u>строковых</u> полей есть специальный оператор фильтрации "подобие".
+ `~`  обычное подобие. Ищет любое вхождение подстроки, следующей после оператора, в значении поля. Например, `?filter=code~ms` найдёт все сущности, у которых в коде встречается подстрока "ms".
+ `~=` левое подобие. Ищет соответствие по префиксу значения. Например `?filter=code~=ms` найдёт все сущности, у которых код начинается на "ms".
+ `=~` правое подобие. Ищет соответствие по постфиксу. Например `?filter=code=~ms` найдёт все сущности, у которых код оканчивается на "ms".

Операторы подобия работают исключительно с полями строкового типа и не учитывают регистр. К полям типа uuid и дата-время они неприменимы.

## Вывод JSON с отступами
В JSON API можно получать ответы от сервера в виде pretty-print JSON (JSON с отступами вместо JSON в одну строку). Для этого нужно добавить специальный заголовок к запросу:<br>
`Lognex-Pretty-Print-JSON` со значением `true`.

## Использование цен без округления
В JSON API можно задавать цены позиций и себестоимость с дробными частями копеек. Для этого нужно добавить специальный заголовок к запросу:<br>
`X-Lognex-Precision` со значением `true`.<br>
Если не использовать этот заголовок, цены и себестоимость округляются до копеек.

## Ссылки на файлы
В JSON API для скачивания файла формируется редирект на временный URL файла. Для корректной работы необходимо поддерживать обработку редиректов.

## Замена ссылок объектами с помощью expand [/entity/salesreturn]
В JSON API, в составе сущностей можно встретить ссылки на связанные объекты.
Ссылки выводятся в формате [Метаданных](#header-метаданные). Для того, чтобы вместо ссылок получить связанные объекты,
не обязательно делать отдельные запросы для каждого из них. Вместо этого, вместе с запросом на получение сущности, нужно передать параметр **expand**.
В качестве значения данного параметра нужно перечислить через запятую все необходимые поля-ссылки,
на месте которых вы бы хотели видеть связанные объекты.
В результате запроса с таким параметром, в ответе вы получите объект с развернутыми вложенными объектами вместо ссылок.
К примеру, в документах, имеющих в составе поле **agent**, вместо ссылки на
контрагента будет выведен объект со всеми полями сущности "Контрагент", описанными [тут](#контрагент-контрагенты).
Максимальный уровень вложенности **expand** : 3.

Также **expand** можно применять для результатов операций создания и обновления.

+ Ниже показаны примеры использования **expand** на [Возврате покупателя](#документ-возврат-покупателя). В примерах представлены только поля **meta** и **demand**.


### Возврат без expand [GET /entity/salesreturn/166909e6-4a99-11e6-8a84-bae500000089]
Объект возврата покупателя в его обычном представлении, имеющий ссылку на отгрузку
+ Response 200 (application/json)
  + Body
        <!-- include(body/expand.json) -->

### Возврат с expand отгрузки [GET /entity/salesreturn/166909e6-4a99-11e6-8a84-bae500000089?expand=demand]
Передаём параметр **expand**=demand.
В ответ придёт возврат покупателя, у которого вместо ссылки на отгрузку, по которой производится возврат, будет вложенный объект со всеми полями данной отгрузки.
+ Response 200 (application/json)
  + Body
        <!-- include(body/expand1.json) -->

### Expand с глубиной 2 [GET /entity/salesreturn/166909e6-4a99-11e6-8a84-bae500000089?expand=demand,demand.agent]
Теперь развернем поле **agent** у вложенной в возврат отгрузки (**demand**).
В ответ придёт возврат покупателя с развёрнутой отгрузкой (**demand**), внутри которой
будет развёрнутый объект контрагента (**agent**). <br>В данном запросе продемонстрирован уровень вложенности
параметра **expand** равный двум.
+ Response 200 (application/json)
  + Body
        <!-- include(body/expand2.json) -->


### Создание отгрузки с expand [POST /entity/demand?expand=agent]
Развернем поле **agent** у создаваемой отгрузки.
В ответ придёт созданная отгрузка с развёрнутым объектом контрагента (**agent**).

+ Request Пример (application/json)
Пример создания отгрузки с параметром запроса expand.
  + Body
        <!-- include(body/expand_post_request.json) -->

+ Response 200 (application/json)
  + Body
        <!-- include(body/expand_post_response.json) -->

### Редактирование отгрузки с expand [PUT /entity/demand/1c3f30d2-88b9-11e7-9464-e4de00000000?expand=agent,organization]
Теперь обновим эту отгрузку и развернем у неё поля **agent** и **organization**.
В ответ придёт изменённая отгрузка с развёрнутым объектом контрагента (**agent**) и развёрнутым объектом юрлица (**organization**).

+ Request Пример (application/json)
Пример редактирования отгрузки с параметром запроса expand.
  + Body
        <!-- include(body/expand_put_request.json) -->
+ Response 200 (application/json)
  + Body
        <!-- include(body/expand_put_response.json) -->



## Доп. поля сущностей [/entity/{entityType}/metadata/attributes]
В JSON API есть возможность управлять набором существующих доп. полей для каждого из типов сущностей перечисленных [тут](#header-работа-с-дополнительными-полями).
Используя соответствующие ресурсы, можно получать список всех доп. полей для указанного типа сущности, а также создавать новые, обновлять и удалять существующие доп. поля.

Структура объекта доп. поля подробно описана в секции [Работа с дополнительными полями](#header-работа-с-дополнительными-полями).

+ Parameters
  + limit: 100 (optional, enum[number])
  Максимальное количество сущностей для извлечения.
  <p>
    <code>Допустимые значения 1 - 100</code>
  </p>
      + Default: `25`
  + offset: 40 (optional, number)
    Отступ в выдаваемом списке сущностей
      + Default: `0`

  + entityType: `demand` (optional, string)
    тип сущностей, для которых осуществляется управление доп. полями.

### Получить все доп поля для указанного типа [GET]
Запрос всех доп. полей для переданного типа сущностей.
Результат: Объект JSON, включающий в себя поля:
- **meta** [Метаданные](#header-метаданные) о выдаче,
- **rows** - Массив JSON объектов, представляющих собой доп. поля.

+ Response 200 (application/json)
Успешный запрос. Результат - JSON представление списка доп. полей.
  + Body
        <!-- include(body/attributes/get_attributes_list.json) -->

### Создать доп. поля [POST]
Действие доступно только для пользователя с правами администратора.<br>
Запрос на создание нового доп. поля для указанного типа сущностей.

+ Request Пример (application/json)
Пример создания двух новых доп. полей для отгрузок.
  + Body
        <!-- include(body/attributes/post_request.json) -->

+ Response 200 (application/json)
Успешный запрос. Результат - JSON представление созданных доп. полей отгрузок.
  + Body
        <!-- include(body/attributes/post_response.json) -->


+ Request Создать + обновить (application/json)
Пример создания нового доп. поля Отгрузок и обновления существующего одним запросом.
  + Body
        <!-- include(body/attributes/post_request_createupdate.json) -->

+ Response 200 (application/json)
Успешный запрос. Результат - JSON представление созданного и обновлённого доп. полей отгрузок.
  + Body
        <!-- include(body/attributes/post_request_createupdate_response.json) -->


+ Request Пользовательский справочник (application/json)
Пример создания дополнительного поля типа пользовательский справочник.
  + Body
        <!-- include(body/attributes/post_request_custom.json) -->

+ Response 200 (application/json)
Успешный запрос. Результат - JSON представление созданного доп. поля.
  + Body
        <!-- include(body/attributes/post_request_custom_response.json) -->


### Удалить доп. поля [POST /entity/{entityType}/metadata/attributes/delete]
Действие доступно только для пользователя с правами администратора.<br>
Запрос на удаление нескольких доп. полей отгрузок.

+ Parameters
  + entityType: `demand` (optional, string)
    тип сущностей, для которых осуществляется управление доп. полями.

+ Request Пример (application/json)
Пример запроса на удаление нескольких доп. полей отгрузок.
  + Body
        <!-- include(body/attributes/delete.json) -->

+ Response 200 (application/json)



## Отдельное доп. поле [/entity/{entityType}/metadata/attributes/{id}]
+ Parameters
  + entityType: `demand` (optional, string)
    тип сущностей, для которых осуществляется управление доп. полями.
  + id: `7944ef04-f831-11e5-7a69-971500188b19` (required, string) - id доп. поля


### Получить доп. поле [GET]
Запрос на получение отдельного доп. поля отгрузок с указанным id.

+ Response 200 (application/json)
Успешный запрос. Результат - JSON представление отдельного доп. поля отгрузок
  + Body
        <!-- include(body/attributes/get_by_id.json) -->

### Изменить доп. поле [PUT]
Действие доступно только для пользователя с правами администратора.<br>
Запрос на обновление отдельного доп. поля для переданного типа сущностей.

+ Request Пример (application/json)
Пример запроса на обновление отдельного доп. поля отгрузок.
  + Body
        <!-- include(body/attributes/put_request.json) -->

+ Response 200 (application/json)
Успешный запрос. Результат - JSON представление обновлённого доп. поля отгрузок.
  + Body
        <!-- include(body/attributes/put_response.json) -->

### Удалить доп. поле [DELETE]
Действие доступно только для пользователя с правами администратора.<br>
Запрос на удаление доп. поля отгрузок с указанным id.

+ Response 200 (application/json)

<!-- include(counterparty.apib) -->
<!-- include(assortment.apib) -->
<!-- include(currency.apib) -->
<!-- include(product.apib) -->
<!-- include(service.apib) -->
<!-- include(bundle.apib) -->
<!-- include(productFolder.apib) -->
<!-- include(variant.apib) -->
<!-- include(consignment.apib) -->
<!-- include(contract.apib) -->
<!-- include(project.apib) -->
<!-- include(companysettings.apib) -->
<!-- include(expenseitem.apib) -->
<!-- include(country.apib) -->
<!-- include(region.apib) -->
<!-- include(group.apib) -->
<!-- include(discount.apib) -->
<!-- include(uom.apib) -->
<!-- include(employee.apib) -->
<!-- include(customentity.apib) -->
<!-- include(store.apib) -->
<!-- include(organization.apib) -->
<!-- include(retailstore.apib) -->
<!-- include(cashier.apib) -->
<!-- include(webhook.apib) -->
<!-- include(template.apib) -->
<!-- include(print.apib) -->
<!-- include(labels.apib) -->
<!-- include(publication.apib) -->
<!-- include(task.apib) -->
<!-- include(bonustransaction.apib) -->
<!-- include(bonusprogram.apib) -->
<!-- include(states.apib) -->
<!-- include(document_general.apib) -->
<!-- include(retailshift.apib) -->
<!-- include(enter.apib) -->
<!-- include(customerOrder.apib) -->
<!-- include(purchaseOrder.apib) -->
<!-- include(invoice_out.apib) -->
<!-- include(invoice_in.apib) -->
<!-- include(payment_in.apib) -->
<!-- include(payment_out.apib) -->
<!-- include(cashin.apib) -->
<!-- include(cashout.apib) -->
<!-- include(demand.apib) -->
<!-- include(supply.apib) -->
<!-- include(loss.apib) -->
<!-- include(move.apib) -->
<!-- include(retaildemand.apib) -->
<!-- include(retail_sales_return.apib) -->
<!-- include(prepayment.apib) -->
<!-- include(prepaymentReturn.apib) -->
<!-- include(retaildrawercashin.apib) -->
<!-- include(retaildrawercashout.apib) -->
<!-- include(sales_return.apib) -->
<!-- include(purchase_return.apib) -->
<!-- include(factureout.apib) -->
<!-- include(facturein.apib) -->
<!-- include(inventory.apib) -->
<!-- include(commissionreportin.apib) -->
<!-- include(commissionreportout.apib) -->
<!-- include(pricelist.apib) -->
<!-- include(processingplan.apib) -->
<!-- include(processingorder.apib) -->
<!-- include(processing.apib) -->
<!-- include(internalOrder.apib) -->
<!-- include(recalc_calculated_quantity.apib) -->
<!-- include(report_stock.apib) -->
<!-- include(report_pnl.apib) -->
<!-- include(report_counterparty.apib) -->
<!-- include(dashboard.apib) -->
<!-- include(audit.apib) -->
<!-- include(notification.apib) -->
<!-- include(notification_by_types.apib) -->
<!-- include(notification_subscription.apib) -->


# Group SDK
## Java SDK
Ссылка на Json SDK для работы с Remap API МоегоСклада [Json SDK](https://github.com/moysklad/java-remap-1.1-sdk)


# Data Structures
## Account Entity (object)
###Properties
+ id: `24124124-4124-4124124` (string, optional) - ID
+ accountId: `121252-12412-4124141-24124` (string, optional) - ID учетной записи


## AgentAccount (Account Entity)
###Properties
+ version: '1'(string, optional) - Версия сущности
+ updated: `2016-04-04 12:20:10`(string, optional) - Последняя временная отметка обновления сущности
+ isDefault: false (boolean, optional) - Является ли счет счетом по умолчанию
+ accountNumber: `1234567876543` (string, required) - Номер счёта
+ bankname: "ОАО Сбербанк" (string, optional) - Наименование банка
+ bankLocation: `г Москва` (string, optional) - Адрес банка
+ correspondentAccount: `1231412412451` (string, optional) - Корр счет
+ bic: `214124` (string, optional) - БИК
+ agent(MetaRef, required) - Агент

## ContactPerson (Account Entity)
###Properties
+ version: '1'(string, optional) - Версия сущности
+ updated: `2016-04-04 12:20:10`(string, optional) - Последняя временная отметка обновления сущности
+ name: `Степан` (string, required) - Имя контактного лица
+ description: `Сертифицированный специалист в области прокрастинации` (string, optional) - Описание контактного лица
+ externalCode: `saufwiq-1&21761254` (string, optional) - Внешний код
+ email: `stepan@myCompany.su` (string, optional) - Адрес электронной почты контактного лица
+ phone: `124124125` (string, optional) - Номер телефона контактного лица
+ position: `Менеджер` (string, optional) - Должность, занимаемая контактным лицом
+ agent(MetaRef, required) - Ссылка на контрагента.


## Meta (object)
###Properties
+ href: `https://online.moysklad.ru/api/remap/1.0/entity/counterparty/850efc5f-f504-11e5-8a84-bae500000161`(string, required) - Ссылка на сущность
+ metaDataHref: `https://online.moysklad.ru/api/remap/1.0/entity/counterparty/850efc5f-f504-11e5-8a84-bae500000161`(string, required) - Ссылка на метаданные
+ type: counterparty (string, optional)  - Тип сущности
+ mediaType: application/json  (string, required) - Тип данных
+ size: 5 (number, optional) - Количество сущностей
+ limit: 25 (number, optional) - Лимит сущностей
+ offset: 2(number, optional) - Отступ в списке сущностей

##MetaRef (object)
###Properties
+ href: `https://online.moysklad.ru/api/remap/1.0/entity/counterparty/850efc5f-f504-11e5-8a84-bae500000161`(string, required) - Ссылка на сущность
+ type: 'counterparty' (string, optional)  - Тип сущности
+ mediaType: 'application/json' (string, required) - Тип данных

##MetaRefWithMetaData (object)
###Properties
+ href: `https://online.moysklad.ru/api/remap/1.0/entity/counterparty/850efc5f-f504-11e5-8a84-bae500000161`(string, required) - Ссылка на сущность
+ metaDataHref: `https://online.moysklad.ru/api/remap/1.0/entity/counterparty/850efc5f-f504-11e5-8a84-bae500000161`(string, required) - Ссылка на метаданные
+ type: 'counterparty' (string, optional)  - Тип сущности
+ mediaType: 'application/json' (string, required) - Тип данных

##EmployeeMeta (object)
###Properties
+ href: `https://online.moysklad.ru/api/remap/1.0/entity/counterparty/850efc5f-f504-11e5-8a84-bae500000161`(string, required) - Ссылка на сущность
+ type: 'employee' (string, optional)  - Тип сущности
+ mediaType: 'application/json' (string, required) - Тип данных

##Context
###Properties
+ employee: (EmployeeMeta, required) - Работник, авторизованный в системе

## Image (object)
+ meta: () - Метаданные об изображении
+ title: (string) - Название изображения
+ filename: (string) - Имя файла
+ size: (number) - размер файла в байтах
+ miniature: () - Ссылка на миниатюру изображения
+ tiny: () - Ссылка на уменьшенное изображение
